grammar gram;
SEMI : ';';
WHITESPACE : ( ' ' | '\t' | '\n' | '\r' )+ -> skip;
COMMENT : ('//' (~[\n])* | '/*' .*? '*/') -> skip;
WHILE : 'while';
LP : [(];
RP : [)];
IF : 'if';
ELSE : 'else';
RETURN : 'return';
LBR : [{];
RBR : [}];
MINUS : '-';
TYPE : ('int'|'string'|'double'|'void');
FPNUM: ([0-9]+[.][0-9]* | [.][0-9]+) (('E'|'e')('-'|'+')?[0-9]+)? | '-'?[0-9]+('E'|'e')('-'|'+')? [0-9]+;
NUM : [0-9]+ ;
OR : 'or';
AND : 'and';
NOT : 'not';
RELOP : '>='|'<='|'>'|'<'|'!='|'==';
PLUS : [+];
MULOP : [*/%];

start : program;
program : braceblock;
stmts : stmt stmts | ;
stmt : cond | loop | return_stmt SEMI;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock;
braceblock : LBR stmts RBR;
expr : orexp;
orexp : orexp OR andexp | andexp;
andexp : andexp AND notexp | notexp;
notexp : NOT notexp | rel;
rel : sum RELOP sum | sum;
sum : sum PLUS term | sum MINUS term | term;
term : term MULOP neg | neg;
neg : MINUS neg | factor;
factor : NUM | FPNUM | LP expr RP;
return_stmt : RETURN expr;
loop : WHILE LP expr RP braceblock;